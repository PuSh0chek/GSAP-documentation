Общие методы создания анимации:
 - gsap.to ();
 - gsap.from();
 - gsap.fromTo();
 
 Для простой анимации (без причудливой последовательности) описанные выше методы - это все, что вам нужно! Например:
    // поворачивать и перемещать элементы с классом "box" ("x" - это ярлык для преобразования translateX()) в течение 1 секунды. 
    gsap.to (".box", {rotation:  27, x: 100, duration:  1});
    
 Временная шкала.
 
        gsap.timeline(pause(), play(), progress(), reverse());
 
  ПЛЕЙХЕД |--------------временная шкала-----|-----------|
|--tween1--|                |
           |-----tween2-----|-----------|
    
   
   Способ создания временной шкалы:
   
   var tl  = gsap.timeline();
   Затем добавьте анимацию, используя один из удобных методов(to(), from(), or fromTo());
   
   tl.to (".box", {duration:  2, x: 100, opacity:  0.5});
   
   Обратите внимание, что мы вызываем .to() в экземпляре временной шкалы (tl в данном случае), а не gsap объект.
   
   gsap.to() с другой стороны, создает автономную анимацию.
   
   // упорядоченный один за другим tl.to (".box1", {duration:  2, x: 100}) //обратите внимание, что здесь нет точки с запятой!
  .to(".box2", {duration:  1, y: 200})
  .to(".box3", {duration:  3, rotation:  360})
  
  Примечание: Вся платформа GSAP является объектно-ориентированной, и вы можете создавать отдельные экземпляры анимации с gsap.to ()
  
  !проще вызвать .to() , .from() или .fromTo() непосредственно в экземпляре Timeline, чтобы сделать то же самое за меньшее количество шагов.!
  var tl = gsap.timeline();
//sequenced one-after-the-other
tl.to(".box1", {duration: 2, x: 100}) //notice that there's no semicolon!
  .to(".box2", {duration: 1, y: 200})
  .to(".box3", {duration: 3, rotation: 360});
  
Управляйте размещением с помощью параметра position  
  //начинается РОВНО через 1,5 секунды от начала временной шкалы:
tl.to (..., 1.5)
  .to(..., "-=0.75") // перекрывается на 0,75 секунды
  .to(..., "+=1") //добавляет 1-секундный интервал перед
  
Labels - используйте метки для обозначения определенных мест на временной шкале, чтобы вы могли размещать там анимации.

//add a label at exactly 3 seconds tl.addLabel("step2", 3)
  .to(..., "step2") //starts at the step2 label
   .to(...,"step2+=0.75") //0.75 seconds after the step2 label

//then later, we can seek() to that spot: tl.seek("step2");

Контроль подростков и сроков.

Tween и Timeline оба расширяют класс анимации, который предоставляет множество полезных методов и свойств.  
___________________________________________________________________  
pause: { .pause( atTime:Number, suppressEvents:Boolean ) : self } 
atTime: Number
(default = null) - время, на которое экземпляр должен перейти перед приостановкой
suppressEvents:Boolean
(default = true) - Если true (по умолчанию), никакие события или обратные вызовы не будут запускаться, когда головка воспроизведения перемещается в новую позицию, определенную в atTime параметр.
Returns : self
self(упрощает цепочку)

// приостанавливается там, где в данный момент находится точка воспроизведения:
myAnimation.pause();

// переходит ровно на 2 секунды в анимацию, а затем приостанавливается:
myAnimation.pause(2);

// переходит ровно на 2 секунды в анимацию и приостанавливается, но не подавляет события во время начального перемещения:
myAnimation.pause (2, false);
____________________________________________________________________
play: {}
____________________________________________________________________
progress: { .progress( value:Number, suppressEvents:Boolean ) : [Number | self] }
Возвращает или устанавливает прогресс анимации, который представляет собой значение от 0 до 1, указывающее положение виртуальной точки воспроизведения (исключая повторы), где 0 - в начале, 0,5 - на полпути, а 1 - завершено.

value:Number
(default = NaN) - Пропуск параметра возвращает текущее значение (getter), тогда как определение параметра задает значение (setter) и возвращает сам экземпляр для упрощения цепочки.

suppressEvents:Boolean
(default = false) - Если trueникакие события или обратные вызовы не будут запускаться при перемещении головки воспроизведения в новую позицию.

Returns : [Number | self]
Пропуск параметра возвращает текущее значение (getter), тогда как определение параметра задает значение (setter) и возвращает сам экземпляр для упрощения цепочки.
//возвращает текущий прогресс
 var progress  = myTween .progress(); 

//устанавливает прогресс на одну четверть завершенного
myTween.progress( 0.25 );  
____________________________________________________________________
restart: { .restart( includeDelay:Boolean, suppressEvents:Boolean ) : self }
Перезапускается и начинается воспроизведение вперед с самого начала.

includeDelay:Boolean
(default = false) — определяет, соблюдается ли задержка (если таковая имеется) при перезапуске. Например, если анимация имеет задержку в 1 секунду, например gsap.to(obj, {duration: 2, x: 100, delay: 1}); а затем позже restart() называется, это начнется немедленно, ноrestart(true) приведет к тому, что задержка будет соблюдена, так что она не начнется еще на 1 секунду.

suppressEvents:Boolean
(default = true) — Если true (по умолчанию), никакие события или обратные вызовы не будут запускаться, когда головка воспроизведения перемещается в новую позицию, определенную в time параметр.

Returns : self
self (упрощает объединение в цепочку)
  
// перезапускается, не включая заданную задержку myAnimation.restart();

//перезапускается, включая любую задержку, и не подавляет события во время первоначального перемещения назад во времени: 0
myAnimation.restart(true, false);  
____________________________________________________________________
resume: { .resume( ) : self }
Возобновляет воспроизведение, не меняя направления (вперед или назад).
myAnimation.timeScale(myAnimation.timeScale() || 0.001).resume()
____________________________________________________________________
reverse: { .reverse( from:*, suppressEvents:Boolean ) : self }
Переворачивает воспроизведение таким образом, чтобы все аспекты анимации были ориентированы в обратном направлении.
(default = null) — Время (или метка для экземпляров временной шкалы), с которого анимация должна начать воспроизведение в обратном порядке (если ни один из них не определен, он начнет воспроизведение с того места, где в данный момент находится точка воспроизведения). Чтобы начать с самого конца анимации, используйте 0. Отрицательные числа относятся к концу анимации, поэтому -1 будет составлять 1 секунду от конца.
suppressEvents:Boolean
Boolean (default = true) — Если true (по умолчанию), никакие события или обратные вызовы не будут запускаться, когда головка воспроизведения перемещается в новую позицию, определенную в from параметр.

// отменяет воспроизведение с того места, где в данный момент находится головка воспроизведения:
myAnimation.reverse();

//отменяет воспроизведение ровно с 2 секунд анимации:
myAnimation.reverse(2);

// отменяет воспроизведение ровно с 2 секунд анимации, но не подавляет события во время начального перемещения:
myAnimation.reverse(2, false);

// отменяет воспроизведение с самого конца анимации:
myAnimation.reverse(0);

//отменяет воспроизведение, начиная ровно с 1 секунды до окончания анимации:
myAnimation.reverse(-1);

//меняет ориентацию (если она направлена вперед, она будет двигаться назад, если назад, она будет двигаться вперед):
if (myAnimation.reversed()) {
 myAnimation.play();
} else {
 myAnimation.reverse();
}

//меняет ориентацию, используя вместо этого метод reversed() (сокращенная версия приведенного выше кода):
myAnimation.reversed( !myAnimation.reversed() );
____________________________________________________________________
seek: {}
time: {}
duration: {}
timeScale: {}
kill: {}
  
